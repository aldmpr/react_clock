{"version":3,"sources":["components/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","time","Date","toLocaleTimeString","timerId","setInterval","this","setState","console","log","prevName","newName","props","clockName","clearInterval","React","Component","App","visibility","showClock","hideClock","changeName","Math","floor","random","className","type","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"sNAUaA,EAAb,4MACEC,MAAe,CACbC,MAAM,IAAIC,MAAOC,sBAFrB,EAKEC,QAAwBC,aAAY,cAAU,GALhD,uDAOE,WAAqB,IAAD,OAClBC,KAAKF,QAAUC,aAAY,WACzB,EAAKE,SAAS,CAAEN,MAAM,IAAIC,MAAOC,uBAEjCK,QAAQC,IAAI,EAAKT,MAAMC,QACtB,OAZP,gCAeE,SAAmBS,GACjB,IAAMC,EAAUL,KAAKM,MAEjBF,IAAaC,GAEfH,QAAQC,IAAR,qCAA0CC,EAASG,UAAnD,eAAmEF,EAAQE,cApBjF,kCAwBE,WACEC,cAAcR,KAAKF,WAzBvB,oBA4BE,WACE,IAAQH,EAASK,KAAKN,MAAdC,KACAY,EAAcP,KAAKM,MAAnBC,UAER,OACE,gCACE,8BAAMA,IACN,8BAAMZ,WAnCd,GAA2Bc,IAAMC,WCD3BC,E,4MACJjB,MAAe,CACba,UAAW,EACXK,YAAY,G,EAGdC,UAAY,WACV,EAAKZ,SAAS,CACZW,YAAY,K,EAIhBE,UAAY,WACV,EAAKb,SAAS,CACZW,YAAY,K,EAIhBG,WAAa,WACX,EAAKd,SAAS,CAAEM,UAAWS,KAAKC,MAAsB,IAAhBD,KAAKE,a,4CAG7C,WACE,MAAkClB,KAAKN,MAA/Ba,EAAR,EAAQA,UAAWK,EAAnB,EAAmBA,WAEnB,OACE,sBAAKO,UAAU,MAAf,UACE,6CACA,8CAEG,IACAP,GACC,cAAC,EAAD,CAAOL,UAAWA,OAGtB,wBACEa,KAAK,SACLC,QAASrB,KAAKa,UACdS,SAAUV,EAHZ,wBAOA,wBACEQ,KAAK,SACLC,QAASrB,KAAKc,UACdQ,UAAWV,EAHb,wBAOA,wBACEQ,KAAK,SACLC,QAASrB,KAAKe,WAFhB,gC,GAjDUN,IAAMC,WA4DTC,IClEfY,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7a4d596f.chunk.js","sourcesContent":["import React from 'react';\n\ntype State = {\n  time: string;\n};\n\ntype Props = {\n  clockName: number;\n};\n\nexport class Clock extends React.Component<Props, State> {\n  state: State = {\n    time: new Date().toLocaleTimeString(),\n  };\n\n  timerId: NodeJS.Timer = setInterval(() => {}, 0);\n\n  componentDidMount() {\n    this.timerId = setInterval(() => {\n      this.setState({ time: new Date().toLocaleTimeString() });\n      // eslint-disable-next-line\n      console.log(this.state.time);\n    }, 1000);\n  }\n\n  componentDidUpdate(prevName: Props) {\n    const newName = this.props;\n\n    if (prevName !== newName) {\n      // eslint-disable-next-line no-console\n      console.log(`The Clock was renamed from ${prevName.clockName} to ${newName.clockName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    const { time } = this.state;\n    const { clockName } = this.props;\n\n    return (\n      <div>\n        <div>{clockName}</div>\n        <div>{time}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock';\n\ntype State = {\n  clockName: number;\n  visibility: boolean;\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    clockName: 0,\n    visibility: true,\n  };\n\n  showClock = () => {\n    this.setState({\n      visibility: true,\n    });\n  };\n\n  hideClock = () => {\n    this.setState({\n      visibility: false,\n    });\n  };\n\n  changeName = () => {\n    this.setState({ clockName: Math.floor(Math.random() * 100) });\n  };\n\n  render() {\n    const { clockName, visibility } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        <p>\n          Current time:\n          {' '}\n          {visibility && (\n            <Clock clockName={clockName} />\n          )}\n        </p>\n        <button\n          type=\"button\"\n          onClick={this.showClock}\n          disabled={visibility}\n        >\n          Show Clock\n        </button>\n        <button\n          type=\"button\"\n          onClick={this.hideClock}\n          disabled={!visibility}\n        >\n          Hide Clock\n        </button>\n        <button\n          type=\"button\"\n          onClick={this.changeName}\n        >\n          Random Name\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}